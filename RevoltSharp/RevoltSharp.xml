<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RevoltSharp</name>
    </assembly>
    <members>
        <member name="T:RevoltSharp.ClientConfig">
            <summary>
            Config options for the RevoltSharp lib.
            </summary>
        </member>
        <member name="F:RevoltSharp.ClientConfig.UserAgent">
            <summary>
            The user agent used for REST requests and websockets.
            </summary>
            <remarks>
            If null, a default user agent is used instead.
            </remarks>
        </member>
        <member name="F:RevoltSharp.ClientConfig.ApiUrl">
            <summary>
            Do not change this unless you know what you're doing.
            </summary>
        </member>
        <member name="F:RevoltSharp.ClientConfig.Debug">
            <summary>
            Do not use this unless you know what you're doing.
            </summary>
        </member>
        <member name="F:RevoltSharp.ClientConfig.UserBot">
            <summary>
            Enable this if you want to use the lib with a userbot
            </summary>
        </member>
        <member name="F:RevoltSharp.ClientConfig.Owners">
            <summary>
            Useful for owner checks and also used for RequireOwnerAttribute when using the built-in command handler.
            </summary>
        </member>
        <member name="F:RevoltSharp.ClientConfig.CfClearance">
            <summary>
            The cf_clearance cookie for Cloudflare.
            </summary>
            <remarks>
            This is only neccesary if Revolt is currently in Under Attack Mode (eg during a DDoS attack).
            Please ensure that the user agent and IP used to generate the clearance cookie will be identical to the ones used by your RevoltSharp client, or else CloudFlare will not accept the clearance.
            </remarks>
        </member>
        <member name="T:RevoltSharp.ClientDebugConfig">
            <summary>
            Debug settings for the RevoltSharp lib.
            </summary>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.EnableConsoleQuickEdit">
            <summary>
            This is only used when running Windows OS, if true then RevoltClient will not disable console quick edit mode for command prompt.
            </summary>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.UploadUrl">
            <summary>
            This will be changed once you run Client.StartAsync()
            </summary>
            <remarks>
            Defaults to https://autumn.revolt.chat
            </remarks>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.WebsocketUrl">
            <summary>
            This will be changed once you run Client.StartAsync()
            </summary>
            <remarks>
            Defaults to wss://ws.revolt.chat
            </remarks>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.LogWebSocketFull">
            <summary>
            Log all websocket events that you get from Revolt.
            </summary>
            <remarks>
            Do not use this in production!
            </remarks>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.LogWebSocketReady">
            <summary>
            Log the websocket ready event json data.
            </summary>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.LogWebSocketError">
            <summary>
            Log when the websocket gets an error.
            </summary>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.LogWebSocketUnknownEvent">
            <summary>
            Log when the websocket gets an unknown event not used in the lib.
            </summary>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.LogRestRequest">
            <summary>
            Log the internal request used on <see cref="M:RevoltSharp.Rest.RevoltRestClient.SendRequestAsync(RevoltSharp.Rest.RequestType,System.String,RevoltSharp.Rest.IRevoltRequest)"/> and <see cref="M:RevoltSharp.Rest.RevoltRestClient.UploadFileAsync(System.Byte[],System.String,RevoltSharp.Rest.UploadFileType)"/>
            </summary>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.LogRestRequestJson">
            <summary>
            Log the json content used when sending a http request.
            </summary>
        </member>
        <member name="P:RevoltSharp.ClientDebugConfig.LogRestResponseJson">
            <summary>
            Log the http response content/json when successful.
            </summary>
        </member>
        <member name="T:RevoltSharp.ClientEvents">
            <summary>
            Do not use this class! only used for <see cref="T:RevoltSharp.RevoltClient"/>
            </summary>
        </member>
        <member name="T:RevoltSharp.ClientEvents.RevoltEvent">
            <summary>
            Event used for RevoltSharp lib.
            </summary>
        </member>
        <member name="T:RevoltSharp.ClientEvents.SelfUserEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.SocketErrorEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.MessageEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.MessagesBulkDeletedEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.UserEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.RoleEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.RoleUpdatedEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.UserUpdatedEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.SelfUserUpdatedEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ServerEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ServerEmojiEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ServerUserEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ServerSelfEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ServerMemberEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.MessageUpdatedEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ChannelMessageIdEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ChannelEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ChannelUserEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.GroupChannelSelfEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.GroupChannelUserEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ChannelUpdatedEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ServerUpdatedEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ReactionEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.ReactionBulkRemovedEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.UserPlatformRemovedEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="T:RevoltSharp.ClientEvents.LogEvent">
            <inheritdoc cref="T:RevoltSharp.ClientEvents.RevoltEvent" />
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnReady">
            <summary>
            Event used when the <see cref="T:RevoltSharp.RevoltClient"/> WebSocket has fully loaded with cached data and <see cref="P:RevoltSharp.RevoltClient.CurrentUser"/> is set.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnWebSocketError">
            <summary>
            Event used when the <see cref="T:RevoltSharp.RevoltClient"/> WebSocket has encountered an error.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnStarted">
            <summary>
            Event used when the <see cref="T:RevoltSharp.RevoltClient"/> has loaded with the <see cref="P:RevoltSharp.RevoltClient.CurrentUser"/>.
            </summary>
            <remarks>
            You can use this with <see cref="F:RevoltSharp.ClientMode.Http" /> and <see cref="F:RevoltSharp.ClientMode.WebSocket" />
            </remarks>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnConnected">
            <summary>
            Event used when the <see cref="T:RevoltSharp.RevoltClient"/> WebSocket has connected successfully.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnMessageRecieved">
            <summary>
            Receive message events from websocket in a <see cref="T:RevoltSharp.TextChannel"/>, <seealso cref="T:RevoltSharp.GroupChannel"/>, <seealso cref="T:RevoltSharp.DMChannel"/> or <seealso cref="T:RevoltSharp.SavedMessagesChannel"/>
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnMessageUpdated">
            <summary>
            Receive message updated event with properties of the updated message. (not last message sadly)
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnMessageDeleted">
            <summary>
            Receive message deleted event with the <see cref="T:RevoltSharp.Channel" /> and message id.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnMessagesBulkDeleted">
            <summary>
            Receieve a list of deleted message ids with the <see cref="T:RevoltSharp.Channel" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnDMChannelOpened">
            <summary>
            A <see cref="T:RevoltSharp.DMChannel" /> has been opened or become active again for the <see cref="T:RevoltSharp.User" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnChannelCreated">
            <summary>
            A <see cref="T:RevoltSharp.ServerChannel" /> has been created in a <see cref="T:RevoltSharp.Server" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnChannelUpdated">
            <summary>
            A channel has been updated with <see cref="T:RevoltSharp.ChannelUpdatedProperties" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnChannelDeleted">
            <summary>
            A <see cref="T:RevoltSharp.Channel" /> has been been deleted, this does not include <see cref="T:RevoltSharp.DMChannel" /> or <see cref="T:RevoltSharp.SavedMessagesChannel" />
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnGroupJoined">
            <summary>
            The current user/bot account has joined a <see cref="T:RevoltSharp.GroupChannel" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnGroupLeft">
            <summary>
            The current user/bot account has left a <see cref="T:RevoltSharp.GroupChannel" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnGroupUserJoined">
            <summary>
            A <see cref="T:RevoltSharp.User" /> has joined the <see cref="T:RevoltSharp.GroupChannel" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnGroupUserLeft">
            <summary>
            A <see cref="T:RevoltSharp.User" /> has left or been removed from the <see cref="T:RevoltSharp.GroupChannel" />
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnServerUpdated">
            <summary>
            A <see cref="T:RevoltSharp.Server" /> has been updated with <see cref="T:RevoltSharp.ServerUpdatedProperties" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnServerJoined">
            <summary>
            The current user/bot account has joined a <see cref="T:RevoltSharp.Server" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnServerLeft">
            <summary>
            The current user/bot account has left a <see cref="T:RevoltSharp.Server" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnMemberJoined">
            <summary>
            A new <see cref="T:RevoltSharp.ServerMember" /> has joined the <see cref="T:RevoltSharp.Server" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnMemberLeft">
            <summary>
            A <see cref="T:RevoltSharp.ServerMember" /> has left the <see cref="T:RevoltSharp.Server" />
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnRoleCreated">
            <summary>
            A new server <see cref="T:RevoltSharp.Role" /> has been created.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnRoleDeleted">
            <summary>
            A server <see cref="T:RevoltSharp.Role" /> has been deleted.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnRoleUpdated">
            <summary>
            A server <see cref="T:RevoltSharp.Role" /> has been updated with <see cref="T:RevoltSharp.RoleUpdatedProperties" />.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnEmojiCreated">
            <summary>
            A server <see cref="T:RevoltSharp.Emoji" /> has been created.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnEmojiDeleted">
            <summary>
            A server <see cref="T:RevoltSharp.Emoji" /> has been deleted.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnUserUpdated">
            <summary>
            A <see cref="T:RevoltSharp.User" /> has been updated.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnCurrentUserUpdated">
            <summary>
            The current user/bot account has been updated.
            </summary>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnUserPlatformRemoved">
            <summary>
            A <see cref="T:RevoltSharp.User" /> has been banned from the Revolt instance.
            </summary>
            <remarks>
            <see cref="T:RevoltSharp.User" /> may be null if not cached.
            </remarks>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnReactionAdded">
            <summary>
            A <see cref="T:RevoltSharp.Emoji" /> reaction has been added to a <see cref="T:RevoltSharp.Message" />.
            </summary>
            <remarks>
            Contains message id or <see cref="T:RevoltSharp.Message" /> that can be downloaded.
            </remarks>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnReactionRemoved">
            <summary>
            A <see cref="T:RevoltSharp.Emoji" /> reaction has been removed from a <see cref="T:RevoltSharp.Message" />.
            </summary>
            <remarks>
            Contains message id or <see cref="T:RevoltSharp.Message" /> that can be downloaded.
            </remarks>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnReactionBulkRemoved">
            <summary>
            All <see cref="T:RevoltSharp.Emoji" /> reactions have been removed from a <see cref="T:RevoltSharp.Message" />.
            </summary>
            <remarks>
            Contains message id or <see cref="T:RevoltSharp.Message" /> that can be downloaded.
            </remarks>
        </member>
        <member name="E:RevoltSharp.ClientEvents.OnLog">
            <summary>
            Called to display information, events, and errors originating from the <see cref="T:RevoltSharp.RevoltClient"/>.
            </summary>
            <remarks>
            By default, RevoltSharp will log its events to the <see cref="T:System.Console"/>. Adding a subscriber to this event overrides this behavior.
            </remarks>
        </member>
        <member name="T:RevoltSharp.RevoltLogSeverity">
            <summary>
            The severity of a log message raised by <see cref="E:RevoltSharp.ClientEvents.OnLog"/>.
            </summary>
        </member>
        <member name="F:RevoltSharp.RevoltLogSeverity.Verbose">
            <summary>
            Debug info message.
            </summary>
        </member>
        <member name="F:RevoltSharp.RevoltLogSeverity.Error">
            <summary>
            Error message info.
            </summary>
        </member>
        <member name="F:RevoltSharp.RevoltLogSeverity.Standard">
            <summary>
            Standard error message.
            </summary>
        </member>
        <member name="T:RevoltSharp.RevoltClient">
            <summary>
            Revolt client used to connect to the Revolt chat API and WebSocket with a user or bot token.
            </summary>
            <remarks>
            Docs: <see href="https://docs.fluxpoint.dev/revoltsharp"/>
            </remarks>
        </member>
        <member name="P:RevoltSharp.RevoltClient.Version">
            <summary>
            Version of the current RevoltSharp lib installed.
            </summary>
        </member>
        <member name="M:RevoltSharp.RevoltClient.#ctor(System.String,RevoltSharp.ClientMode,RevoltSharp.ClientConfig)">
            <summary>
            Create a Revolt client that can be used for user or bot accounts.
            </summary>
            <param name="token">Bot token to connect with.</param>
            <param name="mode">Use http for http requests only with no websocket.</param>
            <param name="config">Optional config stuff for the bot and lib.</param>
        </member>
        <member name="P:RevoltSharp.RevoltClient.Token">
            <summary>
            Revolt bot token used for http requests and websocket.
            </summary>
        </member>
        <member name="P:RevoltSharp.RevoltClient.RevoltVersion">
            <summary>
            The current version of the revolt instance connected to.
            </summary>
            <remarks>
            This will be empty of you do not use <see cref="M:RevoltSharp.RevoltClient.StartAsync" />.
            </remarks>
        </member>
        <member name="P:RevoltSharp.RevoltClient.Config">
            <summary>
            Client config options for user-agent and debug options including self-host support.
            </summary>
        </member>
        <member name="P:RevoltSharp.RevoltClient.Rest">
            <summary>
            Internal rest/http client used to connect to the Revolt API.
            </summary>
            <remarks>
            You can also make custom requests with <see cref="M:RevoltSharp.Rest.RevoltRestClient.SendRequestAsync(RevoltSharp.Rest.RequestType,System.String,RevoltSharp.Rest.IRevoltRequest)"/> and json class based on <see cref="T:RevoltSharp.Rest.IRevoltRequest"/>
            </remarks>
        </member>
        <member name="P:RevoltSharp.RevoltClient.CurrentUser">
            <summary>
            The current logged in user/bot account.
            </summary>
            <remarks>
            This will be <see langword="null" /> of you do not use <see cref="M:RevoltSharp.RevoltClient.StartAsync" />.
            </remarks>
        </member>
        <member name="P:RevoltSharp.RevoltClient.SavedMessagesChannel">
            <summary>
            The current user/bot account's private notes message channel.
            </summary>
            <remarks>
            This will be <see langword="null" /> if you have not created the channel from <see cref="M:RevoltSharp.BotHelper.GetOrCreateSavedMessageChannelAsync(RevoltSharp.Rest.RevoltRestClient)" /> once.
            </remarks>
        </member>
        <member name="M:RevoltSharp.RevoltClient.StartAsync">
            <summary>
            Start the Rest and Websocket to be used for the lib.
            </summary>
            <remarks>
            Will throw a <see cref="T:RevoltSharp.RevoltException"/> if the token is incorrect or failed to login for the current user/bot.
            </remarks>
            <exception cref="T:RevoltSharp.RevoltException"></exception>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
        </member>
        <member name="M:RevoltSharp.RevoltClient.StopAsync">
            <summary>
            Stop the WebSocket connection to Revolt.
            </summary>
            <remarks>
            Will throw a <see cref="T:RevoltSharp.RevoltException"/> if <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
            <exception cref="T:RevoltSharp.RevoltException"></exception>
        </member>
        <member name="P:RevoltSharp.RevoltClient.Servers">
            <summary>
            Get a list of <see cref="T:RevoltSharp.Server" />s from the websocket client.
            </summary>
            <remarks>
            Will be empty if <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:RevoltSharp.RevoltClient.Users">
            <summary>
            Get a list of <see cref="T:RevoltSharp.User" />s from the websocket client.
            </summary>
            <remarks>
            Will be empty if <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:RevoltSharp.RevoltClient.Channels">
            <summary>
            Get a list of <see cref="T:RevoltSharp.Channel" />s from the websocket client.
            </summary>
            <remarks>
            Will be empty if <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:RevoltSharp.RevoltClient.Emojis">
            <summary>
            Get a list of <see cref="T:RevoltSharp.Emoji" />s from the websocket client.
            </summary>
            <remarks>
            Will be empty if <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="T:RevoltSharp.ClientMode">
            <summary>
            Run the client with Http requests only or use websocket to get cached data such as servers, channels and users instead of just ids.
            </summary>
            <remarks>
            Using <see cref="F:RevoltSharp.ClientMode.Http"/> means that some data will be <see langword="null"/> such as <see cref="P:RevoltSharp.Message.Author"/> and will only contain ids <see cref="P:RevoltSharp.Message.AuthorId"/>
            </remarks>
        </member>
        <member name="F:RevoltSharp.ClientMode.Http">
            <summary>
            Client will only use the http/rest client of Revolt and removes any usage/memory of websocket stuff. 
            </summary>
        </member>
        <member name="F:RevoltSharp.ClientMode.WebSocket">
            <summary>
            Will use both WebSocket and http/rest client so you can get cached data for <see cref="T:RevoltSharp.User"/>, <see cref="T:RevoltSharp.Server"/> and <see cref="T:RevoltSharp.Channel"/>
            </summary>
        </member>
        <member name="T:RevoltSharp.RevoltClientHelper">
            <summary>
            Revolt client methods.
            </summary>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.GetRole(RevoltSharp.RevoltClient,System.String)">
            <summary>
            Get a server <see cref="T:RevoltSharp.Role" /> from the websocket cache.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.Role" /> or <see langword="null" />
            </returns>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.TryGetRole(RevoltSharp.RevoltClient,System.String,RevoltSharp.Role@)">
            <inheritdoc cref="M:RevoltSharp.RevoltClientHelper.GetRole(RevoltSharp.RevoltClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.GetEmoji(RevoltSharp.RevoltClient,System.String)">
            <summary>
            Get a server <see cref="T:RevoltSharp.Emoji" /> from the websocket cache.
            </summary>
            <returns><see cref="T:RevoltSharp.Emoji" /> or <see langword="null" /></returns>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.TryGetEmoji(RevoltSharp.RevoltClient,System.String,RevoltSharp.Emoji@)">
            <inheritdoc cref="M:RevoltSharp.RevoltClientHelper.GetEmoji(RevoltSharp.RevoltClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.GetTextChannel(RevoltSharp.RevoltClient,System.String)">
            <summary>
            Get a server <see cref="T:RevoltSharp.TextChannel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:RevoltSharp.TextChannel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.TryGetTextChannel(RevoltSharp.RevoltClient,System.String,RevoltSharp.TextChannel@)">
            <inheritdoc cref="M:RevoltSharp.RevoltClientHelper.GetTextChannel(RevoltSharp.RevoltClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.GetVoiceChannel(RevoltSharp.RevoltClient,System.String)">
            <summary>
            Get a server <see cref="T:RevoltSharp.VoiceChannel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:RevoltSharp.VoiceChannel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.TryGetVoiceChannel(RevoltSharp.RevoltClient,System.String,RevoltSharp.VoiceChannel@)">
            <inheritdoc cref="M:RevoltSharp.RevoltClientHelper.GetVoiceChannel(RevoltSharp.RevoltClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.GetServer(RevoltSharp.RevoltClient,System.String)">
            <summary>
            Get a <see cref="T:RevoltSharp.Server" /> from the websocket cache.
            </summary>
            <returns><see cref="T:RevoltSharp.Server" /> or <see langword="null" /></returns>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.TryGetServer(RevoltSharp.RevoltClient,System.String,RevoltSharp.Server@)">
            <inheritdoc cref="M:RevoltSharp.RevoltClientHelper.GetServer(RevoltSharp.RevoltClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.GetUser(RevoltSharp.RevoltClient,System.String)">
            <summary>
            Get a <see cref="T:RevoltSharp.User" /> from the websocket cache.
            </summary>
            <returns><see cref="T:RevoltSharp.User" /> or <see langword="null" /></returns>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.TryGetUser(RevoltSharp.RevoltClient,System.String,RevoltSharp.User@)">
            <inheritdoc cref="M:RevoltSharp.RevoltClientHelper.GetUser(RevoltSharp.RevoltClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.GetChannel(RevoltSharp.RevoltClient,System.String)">
            <summary>
            Get a <see cref="T:RevoltSharp.Channel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:RevoltSharp.Channel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.TryGetChannel(RevoltSharp.RevoltClient,System.String,RevoltSharp.Channel@)">
            <inheritdoc cref="M:RevoltSharp.RevoltClientHelper.GetChannel(RevoltSharp.RevoltClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.GetGroupChannel(RevoltSharp.RevoltClient,System.String)">
            <summary>
            Get a <see cref="T:RevoltSharp.GroupChannel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:RevoltSharp.GroupChannel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.TryGetGroupChannel(RevoltSharp.RevoltClient,System.String,RevoltSharp.GroupChannel@)">
            <inheritdoc cref="M:RevoltSharp.RevoltClientHelper.GetGroupChannel(RevoltSharp.RevoltClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.GetDMChannel(RevoltSharp.RevoltClient,System.String)">
            <summary>
            Get a <see cref="T:RevoltSharp.DMChannel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:RevoltSharp.DMChannel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:RevoltSharp.RevoltClientHelper.TryGetDMChannel(RevoltSharp.RevoltClient,System.String,RevoltSharp.DMChannel@)">
            <inheritdoc cref="M:RevoltSharp.RevoltClientHelper.GetDMChannel(RevoltSharp.RevoltClient,System.String)" />
        </member>
        <member name="T:RevoltSharp.RevoltException">
            <summary>
            Custom exception for the Revolt client.
            </summary>
        </member>
        <member name="P:RevoltSharp.RevoltException.Code">
            <summary>
            The status code error for this exception if thrown by the rest client.
            </summary>
        </member>
        <member name="T:RevoltSharp.RevoltRestException">
            <summary>
            Custom exception for the Revolt rest client with code.
            </summary>
        </member>
        <member name="P:RevoltSharp.RevoltRestException.Type">
            <summary>
            The type of rest error triggered.
            </summary>
        </member>
        <member name="P:RevoltSharp.RevoltRestException.Permission">
            <summary>
            The permission require for the error <see cref="F:RevoltSharp.RevoltErrorType.MissingPermission"/> or <see cref="F:RevoltSharp.RevoltErrorType.MissingUserPermission"/>
            </summary>
        </member>
        <member name="T:RevoltSharp.RevoltArgumentException">
            <summary>
            Custom exception for the Revolt client when user enters a missing or wrong argument.
            </summary>
        </member>
        <member name="T:RevoltSharp.Channel">
            <summary>
            Revolt channel that can be casted to types <see cref="T:RevoltSharp.GroupChannel"/>, <see cref="T:RevoltSharp.TextChannel"/>, <see cref="T:RevoltSharp.VoiceChannel"/> <see cref="T:RevoltSharp.ServerChannel" /> <see cref="T:RevoltSharp.UnknownServerChannel" /> or <see cref="T:RevoltSharp.UnknownChannel"/>
            </summary>
        </member>
        <member name="P:RevoltSharp.Channel.Id">
            <summary>
            Id of the channel.
            </summary>
        </member>
        <member name="P:RevoltSharp.Channel.CreatedAt">
            <summary>
            Date of when the channel was created.
            </summary>
        </member>
        <member name="P:RevoltSharp.Channel.Type">
            <summary>
            The channel type to cast to.
            </summary>
        </member>
        <member name="T:RevoltSharp.DMChannel">
            <summary>
            A channel between the current user/bot account and another user.
            </summary>
        </member>
        <member name="P:RevoltSharp.DMChannel.Active">
            <summary>
            If the channel is still open for both users.
            </summary>
        </member>
        <member name="P:RevoltSharp.DMChannel.UserId">
            <summary>
            The user id for this DM channel.
            </summary>
        </member>
        <member name="P:RevoltSharp.DMChannel.User">
            <summary>
            The user for this DM channel.
            </summary>
        </member>
        <member name="P:RevoltSharp.DMChannel.LastMessageId">
            <summary>
            The last message id sent in this DM channel.
            </summary>
        </member>
        <member name="T:RevoltSharp.GroupChannel">
            <summary>
            Private group channel with a list of user
            </summary>
        </member>
        <member name="P:RevoltSharp.GroupChannel.Permissions">
            <summary>
            Default permissions for all users
            </summary>
        </member>
        <member name="P:RevoltSharp.GroupChannel.Users">
            <summary>
            List of users in the channel
            </summary>
        </member>
        <member name="P:RevoltSharp.GroupChannel.LastMessageId">
            <summary>
            The last message id sent in this Group channel.
            </summary>
        </member>
        <member name="P:RevoltSharp.GroupChannel.OwnerId">
            <summary>
            Owner of the channel
            </summary>
        </member>
        <member name="P:RevoltSharp.GroupChannel.Name">
            <summary>
            Name of the channel
            </summary>
        </member>
        <member name="P:RevoltSharp.GroupChannel.Description">
            <summary>
            Description of the channel
            </summary>
        </member>
        <member name="P:RevoltSharp.GroupChannel.Icon">
            <summary>
            Icon attachment of the channel
            </summary>
            <remarks>
            This may be <see langword="null" />
            </remarks>
        </member>
        <member name="P:RevoltSharp.GroupChannel.IsNsfw">
            <summary>
            Channel has nsfw content
            </summary>
        </member>
        <member name="T:RevoltSharp.ServerChannel">
            <summary>
            Base channel for all servers that can be casted to <see cref="T:RevoltSharp.TextChannel" /> <see cref="T:RevoltSharp.VoiceChannel" /> or <see cref="T:RevoltSharp.UnknownServerChannel" />
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerChannel.ServerId">
            <summary>
            If of the parent server
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerChannel.Server">
            <summary>
            Parent server of the channel
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:RevoltSharp.ServerChannel.DefaultPermissions">
            <summary>
            Default permissions for all members in the channel
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerChannel.InternalRolePermissions">
            <summary>
            Role permission for the channel that wil override default permissions
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerChannel.RolePermissions">
            <summary>
            Role permission for the channel that wil override default permissions
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerChannel.Name">
            <summary>
            Name of the channel
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerChannel.Description">
            <summary>
            Description of the channel
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerChannel.Icon">
            <summary>
            Icon attachment of the channel
            </summary>
            <remarks>
            This may be <see langword="null" />
            </remarks>
        </member>
        <member name="M:RevoltSharp.ServerChannel.HasPermission(RevoltSharp.ServerMember,RevoltSharp.ChannelPermission)">
            <summary>
            Check if a member has a permission for the channel
            </summary>
            <param name="member"></param>
            <param name="permission"></param>
            <returns><see langword="true" /> if member has permission</returns>
        </member>
        <member name="T:RevoltSharp.TextChannel">
            <summary>
            Server text channel that members can talk in.
            </summary>
        </member>
        <member name="P:RevoltSharp.TextChannel.LastMessageId">
            <summary>
            The last message id sent in this Text channel.
            </summary>
        </member>
        <member name="P:RevoltSharp.TextChannel.IsNsfw">
            <summary>
            Channel has nsfw content.
            </summary>
        </member>
        <member name="T:RevoltSharp.UnknownChannel">
            <summary>
            Channel is an unknown type that can't be fully used 
            </summary>
        </member>
        <member name="T:RevoltSharp.UnknownServerChannel">
            <summary>
            Channel is an unknown type that can't be fully used
            </summary>
        </member>
        <member name="T:RevoltSharp.VoiceChannel">
            <summary>
            Channel that members can speak in to other members
            </summary>
        </member>
        <member name="T:RevoltSharp.Emoji">
            <summary>
            Server or default emoji
            </summary>
        </member>
        <member name="P:RevoltSharp.Emoji.Id">
            <summary>
            Id of the emoji.
            </summary>
        </member>
        <member name="P:RevoltSharp.Emoji.CreatedAt">
            <summary>
            Date of when the emoji was created.
            </summary>
        </member>
        <member name="P:RevoltSharp.Emoji.Server">
            <summary>
            Server that the Emoji is from.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:RevoltSharp.CreatedEntity.Id">
            <summary>
            Id of the object.
            </summary>
        </member>
        <member name="P:RevoltSharp.CreatedEntity.CreatedAt">
            <summary>
            Date of when the object was created.
            </summary>
        </member>
        <member name="T:RevoltSharp.ChannelPermission">
            <summary>
            List of channel permissions
            </summary>
        </member>
        <member name="T:RevoltSharp.ChannelPermissions">
            <summary>
            Permissions for the channel that members can or can't use
            </summary>
        </member>
        <member name="T:RevoltSharp.ChannelType">
            <summary>
            Type of channel that is <see cref="T:RevoltSharp.TextChannel" />, <see cref="T:RevoltSharp.VoiceChannel" />, <see cref="T:RevoltSharp.GroupChannel" />, <see cref="T:RevoltSharp.UnknownServerChannel" /> or <see cref="T:RevoltSharp.UnknownChannel" />
            </summary>
        </member>
        <member name="T:RevoltSharp.ServerPermission">
            <summary>
            List of server permissions
            </summary>
        </member>
        <member name="T:RevoltSharp.ServerPermissions">
            <summary>
            Permissions for the server that members can or can't use
            </summary>
        </member>
        <member name="T:RevoltSharp.Attachment">
            <summary>
            Revolt file attachment for messages which could by any type including an image.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.Id">
            <summary>
            Id of the attachment.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.CreatedAt">
            <summary>
            Date of when the attachment was created.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.Tag">
            <summary>
            The type of attachment used avatar, banner, icon, ect.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.Filename">
            <summary>
            The original file name of the attachment.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.Type">
            <summary>
            The file mime type of the attachment.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.Size">
            <summary>
            The size of the file attachment.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.Width">
            <summary>
            The width of the image if the file is an image type.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.Height">
            <summary>
            The height of the image if the file is an image type.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.Deleted">
            <summary>
            File has been deleted.
            </summary>
        </member>
        <member name="P:RevoltSharp.Attachment.Reported">
            <summary>
            File has been reported by a user.
            </summary>
        </member>
        <member name="M:RevoltSharp.Attachment.GetUrl(System.Nullable{System.Int32})">
            <summary>
            The URL of the attachment.
            </summary>
        </member>
        <member name="T:RevoltSharp.EmbedBuilder">
            <summary>
            Create a embed to use for messages
            </summary>
        </member>
        <member name="P:RevoltSharp.EmbedBuilder.Title">
            <summary>
            Embed title
            </summary>
        </member>
        <member name="P:RevoltSharp.EmbedBuilder.Url">
            <summary>
            Embed url
            </summary>
        </member>
        <member name="P:RevoltSharp.EmbedBuilder.IconUrl">
            <summary>
            Embed icon url
            </summary>
        </member>
        <member name="P:RevoltSharp.EmbedBuilder.Description">
            <summary>
            Embed description
            </summary>
        </member>
        <member name="P:RevoltSharp.EmbedBuilder.Image">
            <summary>
            Embed image attachment
            </summary>
        </member>
        <member name="P:RevoltSharp.EmbedBuilder.Color">
            <summary>
            Embed color
            </summary>
        </member>
        <member name="M:RevoltSharp.EmbedBuilder.Build">
            <summary>
            Build the embed to use it in messages
            </summary>
            <returns><see cref="T:RevoltSharp.Embed" /></returns>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.Type">
            <summary>
            Type of embed
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.Url">
            <summary>
            Embed url
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.IconUrl">
            <summary>
            Embed icon url
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.Title">
            <summary>
            Embed title
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.Description">
            <summary>
            Embed description
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.Site">
            <summary>
            Embed site name
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.Color">
            <summary>
            Embed color
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.Image">
            <summary>
            Embed image attachment
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.Video">
            <summary>
            Embed video attachment
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageEmbed.Provider">
            <summary>
            Embed provider
            </summary>
        </member>
        <member name="T:RevoltSharp.Embed">
            <summary>
            Message embeds
            </summary>
        </member>
        <member name="P:RevoltSharp.Embed.Url">
            <summary>
            Embed url
            </summary>
        </member>
        <member name="P:RevoltSharp.Embed.IconUrl">
            <summary>
            Embed icon url
            </summary>
        </member>
        <member name="P:RevoltSharp.Embed.Title">
            <summary>
            Embed title
            </summary>
        </member>
        <member name="P:RevoltSharp.Embed.Description">
            <summary>
            Embed description
            </summary>
        </member>
        <member name="P:RevoltSharp.Embed.Image">
            <summary>
            Embed image url
            </summary>
        </member>
        <member name="P:RevoltSharp.Embed.Color">
            <summary>
            Embed color
            </summary>
        </member>
        <member name="T:RevoltSharp.FileAttachment">
            <summary>
            Uploaded file attachment that can be used in other requests such as CreateEmojiAsync
            </summary>
        </member>
        <member name="P:RevoltSharp.FileAttachment.Id">
            <summary>
            Id of the attachment.
            </summary>
        </member>
        <member name="P:RevoltSharp.FileAttachment.CreatedAt">
            <summary>
            Date of when the attachment was created.
            </summary>
        </member>
        <member name="T:RevoltSharp.Message">
            <summary>
            Base chat messages that can be casted to <see cref="T:RevoltSharp.UserMessage"/> or <see cref="T:RevoltSharp.SystemMessage`1"/>
            </summary>
        </member>
        <member name="P:RevoltSharp.Message.Id">
            <summary>
            Id of the message.
            </summary>
        </member>
        <member name="P:RevoltSharp.Message.CreatedAt">
            <summary>
            Date of when the message was created.
            </summary>
        </member>
        <member name="P:RevoltSharp.Message.ChannelId">
            <summary>
            Parent channel id of the message
            </summary>
        </member>
        <member name="P:RevoltSharp.Message.Channel">
            <summary>
            Channel that the Message is from.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:RevoltSharp.Message.Server">
            <summary>
            Server that the Message is from.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:RevoltSharp.ClientMode.Http"/> or invalid channel context.
            </remarks>
        </member>
        <member name="P:RevoltSharp.Message.AuthorId">
            <summary>
            Id of the user who posted the message
            </summary>
        </member>
        <member name="P:RevoltSharp.Message.Author">
            <summary>
            User who posted the message
            </summary>
            <remarks>
            Will be <see langword="null" /> for system/webhook messages.
            </remarks>
        </member>
        <member name="T:RevoltSharp.SystemMessage`1">
            <summary>
            System messages sent by Revolt for information/changes
            </summary>
            <typeparam name="Type"></typeparam>
        </member>
        <member name="T:RevoltSharp.SystemUnknown">
            <summary>
            Unknown system messages
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemText">
            <summary>
            System message with text content
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemUserAdded">
            <summary>
            User has been added to a group channel
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemUserRemoved">
            <summary>
            User has been removed from the group channel
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemUserJoined">
            <summary>
            Member has joined the server
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemUserLeft">
            <summary>
            Member has left the server
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemUserKicked">
            <summary>
            Member has been kicked from the server
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemUserBanned">
            <summary>
            Member has been banned from the server
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemChannelRenamed">
            <summary>
            Group channel name has been changed
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemChannelDescriptionChanged">
            <summary>
            Group channel description has been changed
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemChannelIconChanged">
            <summary>
            Group channel icon has been changed
            </summary>
        </member>
        <member name="T:RevoltSharp.SystemChannelOwnershipChanged">
            <summary>
            Group channel ownership has been changed
            </summary>
        </member>
        <member name="T:RevoltSharp.UserMessage">
            <summary>
            User messages sent with text, author, attachments, embeds, replies, mentions and optional parent server.
            </summary>
        </member>
        <member name="T:RevoltSharp.Invite">
            <summary>
            Server invite
            </summary>
        </member>
        <member name="T:RevoltSharp.Role">
            <summary>
            Server role
            </summary>
        </member>
        <member name="P:RevoltSharp.Role.Id">
            <summary>
            Id of the role.
            </summary>
        </member>
        <member name="P:RevoltSharp.Role.CreatedAt">
            <summary>
            Date of when the role was created.
            </summary>
        </member>
        <member name="P:RevoltSharp.Role.Server">
            <summary>
            Server that the Role is from.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:RevoltSharp.Server.Id">
            <summary>
            Id of the server.
            </summary>
        </member>
        <member name="P:RevoltSharp.Server.CreatedAt">
            <summary>
            Date of when the server was created.
            </summary>
        </member>
        <member name="P:RevoltSharp.Server.Name">
            <summary>
            Name of the server
            </summary>
        </member>
        <member name="P:RevoltSharp.Server.Description">
            <summary>
            Description for the server
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerBan.Id">
            <summary>
            Id of the ban.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerBan.CreatedAt">
            <summary>
            Date of when the ban occured.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerBan.Username">
            <summary>
            Username of the banned user.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerBan.Reason">
            <summary>
            Reason for ban creation.
            </summary>
        </member>
        <member name="T:RevoltSharp.ServerMember">
            <summary>
            A user that is a member of a server.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.Id">
            <summary>
            User ID of the parent user object.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.MemberId">
            <summary>
            Member ID of the user.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.JoinedAt">
            <summary>
            UTC date time of when the user joined the server.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.ServerId">
            <summary>
            Server ID that the user is in.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.Server">
            <summary>
            Server that the Member is in.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:RevoltSharp.ServerMember.Nickname">
            <summary>
            Custom server nickname that user has set.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.User">
            <summary>
            The parent user object of this member.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.CurrentName">
            <summary>
            Get the current name of this user from the nickname or username.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.ServerAvatar">
            <summary>
            The avatar attachment for the custom member's avatar.
            </summary>
            <remarks>
            Will be <see langword="null" /> if member has no avatar set.
            </remarks>
        </member>
        <member name="M:RevoltSharp.ServerMember.GetDefaultAvatarUrl(System.Nullable{System.Int32})">
            <inheritdoc cref="M:RevoltSharp.User.GetDefaultAvatarUrl(System.Nullable{System.Int32})" />
        </member>
        <member name="M:RevoltSharp.ServerMember.GetServerAvatarUrl(System.Nullable{System.Int32})">
            <summary>
            Get the avatar url for this member, may be empty.
            </summary>
            <returns>URL of the image</returns>
        </member>
        <member name="M:RevoltSharp.ServerMember.GetServerAvatarOrDefaultUrl(System.Nullable{System.Int32})">
            <summary>
            Get the avatar url of this member or the default Revolt avatar.
            </summary>
            <returns>URL of the image</returns>
        </member>
        <member name="M:RevoltSharp.ServerMember.GetServerAvatarOrUserAvatarOrDefaultUrl">
            <summary>
            Get the avatar url for the member, parent user or default Revolt avatar.
            </summary>
        </member>
        <member name="M:RevoltSharp.ServerMember.GetAvatarUrlExt(RevoltSharp.AvatarSources,System.Nullable{System.Int32})">
            <inheritdoc cref="M:RevoltSharp.User.GetAvatarUrlExt(RevoltSharp.AvatarSources,System.Nullable{System.Int32})"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.RolesIds">
            <summary>
            List of role IDs that the member has.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.Timeout">
            <summary>
            The member is timed out/muted with the specified date time.
            </summary>
            <remarks>
            Will be null if member is not timed out/muted.
            </remarks>
        </member>
        <member name="P:RevoltSharp.ServerMember.IsTimedOut">
            <summary>
            The member is currently timed out/muted.
            </summary>
            <remarks>
            They will not be able to send messsages in the server.
            </remarks>
        </member>
        <member name="M:RevoltSharp.ServerMember.GetRole(System.String)">
            <summary>
            Get a role the member has.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:RevoltSharp.ClientMode.Http"/> or no Role found.
            </remarks>
        </member>
        <member name="P:RevoltSharp.ServerMember.Permissions">
            <summary>
            The member has these permissions in the server.
            </summary>
        </member>
        <member name="P:RevoltSharp.ServerMember.Username">
            <inheritdoc cref="P:RevoltSharp.User.Username"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.Status">
            <inheritdoc cref="P:RevoltSharp.User.Status"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.Avatar">
            <inheritdoc cref="P:RevoltSharp.User.Avatar"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.Badges">
            <inheritdoc cref="P:RevoltSharp.User.Badges"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.Flags">
            <inheritdoc cref="P:RevoltSharp.User.Flags"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.BotData">
            <inheritdoc cref="P:RevoltSharp.User.BotData"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.IsOnline">
            <inheritdoc cref="P:RevoltSharp.User.IsOnline"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.Privileged">
            <inheritdoc cref="P:RevoltSharp.User.Privileged"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.Relationship">
            <inheritdoc cref="P:RevoltSharp.User.Relationship"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.IsBot">
            <inheritdoc cref="P:RevoltSharp.User.IsBot"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.IsBlocked">
            <inheritdoc cref="P:RevoltSharp.User.IsBlocked"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.MutualServers">
            <inheritdoc cref="P:RevoltSharp.User.MutualServers"/>
        </member>
        <member name="P:RevoltSharp.ServerMember.MutualGroups">
            <inheritdoc cref="P:RevoltSharp.User.MutualGroups"/>
        </member>
        <member name="P:RevoltSharp.MessageUpdatedProperties.Id">
            <summary>
            Id of the message.
            </summary>
        </member>
        <member name="P:RevoltSharp.MessageUpdatedProperties.CreatedAt">
            <summary>
            Date of when the message was created.
            </summary>
        </member>
        <member name="P:RevoltSharp.RoleUpdatedProperties.Id">
            <summary>
            Id of the role.
            </summary>
        </member>
        <member name="P:RevoltSharp.RoleUpdatedProperties.CreatedAt">
            <summary>
            Date of when the role was created.
            </summary>
        </member>
        <member name="P:RevoltSharp.SelfUser.Owner">
            <summary>
            Get the Owner user of the bot.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:RevoltSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="T:RevoltSharp.User">
            <summary>
            A Revolt user with various data.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.Id">
            <summary>
            Id of the user.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.CreatedAt">
            <summary>
            Date of when the user was created.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.Username">
            <summary>
            Unique username of the user.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.Discriminator">
            <summary>
            Unique identity number of the user.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.DisplayName">
            <summary>
            Get the display name of the user.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.Name">
            <summary>
            Get the name of the user which will use username or display name if set.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.Tag">
            <summary>
            Get the username and discriminator of the user.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.Status">
            <summary>
            Status mode and text for the user.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.Avatar">
            <summary>
            Avatar attachment for this user.
            </summary>
            <remarks>
            Will be <see langword="null" /> if the user has no custom avatar set.
            </remarks>
        </member>
        <member name="M:RevoltSharp.User.GetDefaultAvatarUrl(System.Nullable{System.Int32})">
            <summary>
            Get the default revolt avatar url for this user.
            </summary>
            <returns>URL of the image (No extension)</returns>
        </member>
        <member name="M:RevoltSharp.User.GetAvatarUrl(System.Nullable{System.Int32})">
            <summary>
            Get the user's custom avatar url, may be empty.
            </summary>
            <returns>URL of the image</returns>
        </member>
        <member name="M:RevoltSharp.User.GetAvatarOrDefaultUrl(System.Nullable{System.Int32})">
            <summary>
            Get the user's custom avatar url or the default revolt avatar url. 
            </summary>
            <returns>URL of the image</returns>
        </member>
        <member name="M:RevoltSharp.User.GetAvatarUrlExt(RevoltSharp.AvatarSources,System.Nullable{System.Int32})">
            <summary>
            Gets the user's avatar.
            </summary>
            <param name="which">Which avatar to return.</param>
            <param name="size"></param>
            <returns>URL of the image</returns>
        </member>
        <member name="P:RevoltSharp.User.Badges">
            <summary>
            Cool badges that the user has.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.Flags">
            <summary>
            User has been marked with system settings such as <see cref="F:RevoltSharp.UserFlagType.Suspended"/> or <see cref="F:RevoltSharp.UserFlagType.Deleted"/>.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.BotData">
            <summary>
            The data for a bot account with owner property.
            </summary>
            <remarks>
            Will be <see langword="null" /> if the <see cref="T:RevoltSharp.User"/> is not a bot account
            </remarks>
        </member>
        <member name="P:RevoltSharp.User.IsOnline">
            <summary>
            Is the user currently online.
            </summary>
            <remarks>
            Will be <see langword="false" /> if status is also <see cref="F:RevoltSharp.UserStatusType.Invisible"/>
            </remarks>
        </member>
        <member name="P:RevoltSharp.User.Privileged">
            <summary>
            Is the user a Revolt instance administrator.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.Relationship">
            <summary>
            The relationship type of the user compared to the current user/bot account.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.IsBot">
            <summary>
            Is the user a bot account.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.IsBlocked">
            <summary>
            Is ther user blocked by the current user/bot account.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.MutualDMs">
            <summary>
            Known mutual DM channels for the current user/bot account.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.MutualServers">
            <summary>
            Known mutual servers that this user has for the current user/bot account.
            </summary>
            <remarks>
            This may not be fully accurate.
            </remarks>
        </member>
        <member name="P:RevoltSharp.User.MutualGroups">
            <summary>
            Known mutual group channels that this user has for the current user/bot account.
            </summary>
        </member>
        <member name="P:RevoltSharp.User.HasMutuals">
            <summary>
            Does the user have mutual servers, groups or DMs for the current user/bot account.
            </summary>
            <remarks>
            This may not be fully accurate.
            </remarks>
        </member>
        <member name="T:RevoltSharp.BotData">
            <summary>
            Data for the bot account that this user is.
            </summary>
        </member>
        <member name="P:RevoltSharp.BotData.OwnerId">
            <summary>
            Owner ID of the bot account.
            </summary>
        </member>
        <member name="T:RevoltSharp.UserRelationship">
            <summary>
            Relationship type compared to the current user/bot account.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserRelationship.None">
            <summary>
            Default type
            </summary>
        </member>
        <member name="F:RevoltSharp.UserRelationship.User">
            <summary>
            Idk shrug
            </summary>
        </member>
        <member name="F:RevoltSharp.UserRelationship.Friend">
            <summary>
            User is a friend
            </summary>
        </member>
        <member name="F:RevoltSharp.UserRelationship.Outgoing">
            <summary>
            User needs to accept a friend request
            </summary>
        </member>
        <member name="F:RevoltSharp.UserRelationship.Incoming">
            <summary>
            You need to accept a friend request from the user
            </summary>
        </member>
        <member name="F:RevoltSharp.UserRelationship.Blocked">
            <summary>
            The current user/bot has blocked this user
            </summary>
        </member>
        <member name="F:RevoltSharp.UserRelationship.BlockedOther">
            <summary>
            The user has blocked the current user/bot
            </summary>
        </member>
        <member name="T:RevoltSharp.UserBadges">
            <summary>
            Cool badges the user has.
            </summary>
        </member>
        <member name="P:RevoltSharp.UserBadges.Raw">
            <summary>
            Not recommended to use, use <see cref="M:RevoltSharp.UserBadges.Has(RevoltSharp.UserBadgeType)"/> instead.
            </summary>
        </member>
        <member name="M:RevoltSharp.UserBadges.Has(RevoltSharp.UserBadgeType)">
            <summary>
            Check if a user has a badge.
            </summary>
            <param name="type">The type of badge to check</param>
            <returns><see langword="true" /> if user has this badge otherwise <see langword="false" /></returns>
        </member>
        <member name="T:RevoltSharp.UserBadgeType">
            <summary>
            Cool badges for users :)
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.Developer">
            <summary>
            User is a Revolt developer that works on Revolt magic
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.Translator">
            <summary>
            User has helped translate Revolt or other Revolt related stuff.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.Supporter">
            <summary>
            User has supported the project by donating.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.ResponsibleDisclosure">
            <summary>
            User has disclosed a major bug or security issue.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.Founder">
            <summary>
            Hi insert :)
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.PlatformModeration">
            <summary>
            User has the power to moderate the Revolt instance.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.ActiveSupporter">
            <summary>
            Active support for the Revolt project.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.Paw">
            <summary>
            OwO
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.EarlyAdopter">
            <summary>
            User was an early member/tester of the Revolt project.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.ReservedRelevantJokeBadge1">
            <summary>
            Haha funny
            </summary>
        </member>
        <member name="F:RevoltSharp.UserBadgeType.ReservedRelevantJokeBadge2">
            <summary>
            Haha memes
            </summary>
        </member>
        <member name="T:RevoltSharp.UserFlags">
            <summary>
            System flags set for the user.
            </summary>
        </member>
        <member name="P:RevoltSharp.UserFlags.Raw">
            <summary>
            Not recommended to use, use <see cref="M:RevoltSharp.UserFlags.Has(RevoltSharp.UserFlagType)"/> instead.
            </summary>
        </member>
        <member name="M:RevoltSharp.UserFlags.Has(RevoltSharp.UserFlagType)">
            <summary>
            Check if the user has a flag.
            </summary>
            <param name="type">The type of system flag to check</param>
            <returns><see langword="true" /> if user has the flag otherwise <see langword="false" /></returns>
        </member>
        <member name="T:RevoltSharp.UserFlagType">
            <summary>
            System flags for the Revolt instance.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserFlagType.Suspended">
            <summary>
            User has been suspended from using the Revolt instance.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserFlagType.Deleted">
            <summary>
            User has deleted their account on the Revolt instance.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserFlagType.Banned">
            <summary>
            User has been banned from the Revolt instance.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserFlagType.Spam">
            <summary>
            User has been banned for spam from the Revolt instance.
            </summary>
        </member>
        <member name="T:RevoltSharp.UserStatus">
            <summary>
            User status mode and presence text.
            </summary>
        </member>
        <member name="P:RevoltSharp.UserStatus.Text">
            <summary>
            Custom text status for the user.
            </summary>
        </member>
        <member name="P:RevoltSharp.UserStatus.Type">
            <summary>
            Status mode for the user.
            </summary>
        </member>
        <member name="T:RevoltSharp.UserStatusType">
            <summary>
            Status mode for the user.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserStatusType.Offline">
            <summary>
            User is not online on Revolt.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserStatusType.Online">
            <summary>
            User is online and using Revolt.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserStatusType.Idle">
            <summary>
            User is away from their computer.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserStatusType.Focus">
            <summary>
            User is focused on a task but is available.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserStatusType.Busy">
            <summary>
            Do not FK WITH THIS USER.
            </summary>
        </member>
        <member name="F:RevoltSharp.UserStatusType.Invisible">
            <summary>
            Who you gonna call? Ghost busters!
            </summary>
        </member>
        <member name="T:RevoltSharp.Downloadable`2">
            <summary>
            Cached object or downloadable from the Revolt instance API.
            </summary>
        </member>
        <member name="M:RevoltSharp.Downloadable`2.GetOrDownloadAsync">
            <summary>
            Get the object from cache or download it from the Revolt instance API if not cached.
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.Bold(System.String)">
            <summary>
            Format the text in bold.
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.Italic(System.String)">
            <summary>
            Format the text in italics.
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.BoldItalic(System.String)">
            <summary>
            Format the text in bold and italics.
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.Strikethrough(System.String)">
            <summary>
            Format the text with a strikethrough.
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.Quote(System.String)">
            <summary>
            Format the text in a quote block.
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.Spoiler(System.String)">
            <summary>
            Format the text in a spoiler block
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.Link(System.String,System.String)">
            <summary>
            Format the text as a link.
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.Heading(System.String,RevoltSharp.HeadingFormat)">
            <summary>
            Format the text as a heading title.
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.Code(System.String)">
            <summary>
            Format the text in a code line.
            </summary>
        </member>
        <member name="M:RevoltSharp.Format.CodeBlock(System.String,System.String)">
            <summary>
            Format the text in code block.
            </summary>
        </member>
        <member name="T:RevoltSharp.Ulid">
            <summary>
            Represents a Universally Unique Lexicographically Sortable Identifier (ULID).
            Spec: https://github.com/ulid/spec
            </summary>
        </member>
        <member name="M:RevoltSharp.DisableConsoleQuickEdit.Go">
            <summary>
            Fix the console from freezing the bot due to checking for readinput in the console
            </summary>
        </member>
        <member name="T:RevoltSharp.BotHelper">
            <summary>
            Revolt http/rest methods for current user/bot account.
            </summary>
        </member>
        <member name="M:RevoltSharp.BotHelper.UploadFileAsync(RevoltSharp.Channel,System.Byte[],System.String,RevoltSharp.Rest.UploadFileType)">
            <inheritdoc cref="M:RevoltSharp.Rest.RevoltRestClient.UploadFileAsync(System.Byte[],System.String,RevoltSharp.Rest.UploadFileType)" />
        </member>
        <member name="M:RevoltSharp.BotHelper.UploadFileAsync(RevoltSharp.Channel,System.String,RevoltSharp.Rest.UploadFileType)">
            <inheritdoc cref="M:RevoltSharp.Rest.RevoltRestClient.UploadFileAsync(System.Byte[],System.String,RevoltSharp.Rest.UploadFileType)" />
        </member>
        <member name="M:RevoltSharp.BotHelper.GetOrCreateSavedMessageChannelAsync(RevoltSharp.SelfUser)">
            <inheritdoc cref="M:RevoltSharp.BotHelper.GetOrCreateSavedMessageChannelAsync(RevoltSharp.Rest.RevoltRestClient)" />
        </member>
        <member name="M:RevoltSharp.BotHelper.GetOrCreateSavedMessageChannelAsync(RevoltSharp.Rest.RevoltRestClient)">
            <summary>
            Get or create the current user/bot's saved messages channel that is private.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.SavedMessagesChannel" /> or <see langword="null" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.SelfUserHelper">
            <summary>
            Revolt http/rest methods for current user/bot account.
            </summary>
        </member>
        <member name="M:RevoltSharp.SelfUserHelper.ModifySelfAsync(RevoltSharp.SelfUser,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.UserStatusType},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String})">
            <inheritdoc cref="M:RevoltSharp.SelfUserHelper.ModifySelfAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.UserStatusType},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String})" />
        </member>
        <member name="M:RevoltSharp.SelfUserHelper.ModifySelfAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.UserStatusType},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String})">
            <summary>
            Modify the current user/bot account avatar, status and profile.
            </summary>
            <returns>
            Modified <see cref="T:RevoltSharp.SelfUser"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.UserHelper">
            <summary>
            Revolt http/rest methods for users.
            </summary>
        </member>
        <member name="M:RevoltSharp.UserHelper.GetUserAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.UserHelper.GetUserAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.UserHelper.GetUserAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get a user.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.User" /> or <see langword="null" /> if no mutual servers, groups or dms.
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.UserHelper.GetProfileAsync(RevoltSharp.User)">
            <inheritdoc cref="M:RevoltSharp.UserHelper.GetProfileAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.UserHelper.GetProfileAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get the profile info for a user.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.Profile" /> or <see langword="null" /> if no mutual servers, groups or dms.
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.UserHelper.GetDMChannelAsync(RevoltSharp.User)">
            <inheritdoc cref="M:RevoltSharp.UserHelper.GetUserDMChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.UserHelper.GetUserDMChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get or open a DM channel for the user.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.DMChannel" /> or <see langword="null" /> if no mutual servers, groups or dms.
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.UserHelper.BlockAsync(RevoltSharp.User)">
            <inheritdoc cref="M:RevoltSharp.UserHelper.BlockUserAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.UserHelper.BlockUserAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Block a user for the current user/bot account.
            </summary>
            <remarks>
            The user will not be able to DM the current user/bot account.
            </remarks>
            <returns>
            <see cref="T:RevoltSharp.User" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.UserHelper.UnBlockAsync(RevoltSharp.User)">
            <inheritdoc cref="M:RevoltSharp.UserHelper.UnBlockUserAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.UserHelper.UnBlockUserAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Unblock a user for the current user/bot account.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.User" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.ChannelHelper">
            <summary>
            Revolt http/rest methods for base channel types.
            </summary>
        </member>
        <member name="M:RevoltSharp.ChannelHelper.GetChannelAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.ChannelHelper.GetChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.ChannelHelper.GetChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get a channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.Channel"/> or <see langword="null" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.ChannelHelper.ModifyChannelAsync(RevoltSharp.Server,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean})">
            <inheritdoc cref="M:RevoltSharp.ChannelHelper.ModifyChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.String})" />
        </member>
        <member name="M:RevoltSharp.ChannelHelper.ModifyChannelAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Channel,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.String})">
            <inheritdoc cref="M:RevoltSharp.ChannelHelper.ModifyChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.String})" />
        </member>
        <member name="M:RevoltSharp.ChannelHelper.ModifyChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.String})">
            <summary>
            Update a channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.Channel"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.ChannelHelper.DeleteAsync(RevoltSharp.ServerChannel)">
            <inheritdoc cref="M:RevoltSharp.ChannelHelper.DeleteChannelAsync(RevoltSharp.Server,System.String)" />
        </member>
        <member name="M:RevoltSharp.ChannelHelper.DeleteChannelAsync(RevoltSharp.Server,System.String)">
            <summary>
            Delete a server channel.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.ChannelHelper.DeleteChannelAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Channel)">
            <inheritdoc cref="M:RevoltSharp.ChannelHelper.DeleteChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.ChannelHelper.DeleteChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Delete a channel.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.GroupChannelHelper">
            <summary>
            Revolt http/rest methods for group channels.
            </summary>
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.CreateGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,RevoltSharp.Option{System.String},System.Boolean)">
            <summary>
            Create a group channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.GroupChannel"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.GetUsersAsync(RevoltSharp.GroupChannel)">
            <inheritdoc cref="M:RevoltSharp.GroupChannelHelper.GetGroupChannelUsersAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.GetGroupChannelUsersAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get a list of users for the group channel.
            </summary>
            <returns>
            List of <see cref="T:RevoltSharp.User"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.GetGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get a group channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.GroupChannel"/> or <see langword="null" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.GetGroupChannelsAsync(RevoltSharp.Rest.RevoltRestClient)">
            <summary>
            Get a list of group channels the current user/bot account is in.
            </summary>
            <returns>
            List of <see cref="T:RevoltSharp.GroupChannel"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.LeaveAsync(RevoltSharp.GroupChannel)">
            <inheritdoc cref="M:RevoltSharp.GroupChannelHelper.LeaveGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.LeaveGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Leave a group channel or delete if you are the last user.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.AddUserAsync(RevoltSharp.GroupChannel,RevoltSharp.User)">
            <inheritdoc cref="M:RevoltSharp.GroupChannelHelper.AddUserToGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.AddUserAsync(RevoltSharp.GroupChannel,System.String)">
            <inheritdoc cref="M:RevoltSharp.GroupChannelHelper.AddUserToGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.AddUserToGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)">
            <summary>
            Add a user to the group channel.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.RemoveUserAsync(RevoltSharp.GroupChannel,RevoltSharp.User)">
            <inheritdoc cref="M:RevoltSharp.GroupChannelHelper.RemoveUserFromGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.RemoveUserAsync(RevoltSharp.GroupChannel,System.String)">
            <inheritdoc cref="M:RevoltSharp.GroupChannelHelper.RemoveUserFromGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.RemoveUserFromGroupChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)">
            <summary>
            Remove a user from the group channel.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.GroupChannelHelper.ModifyAsync(RevoltSharp.GroupChannel,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.String})">
            <summary>
            Update a group channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.GroupChannel"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.MessageHelper">
            <summary>
            Revolt http/rest methods for messages.
            </summary>
        </member>
        <member name="M:RevoltSharp.MessageHelper.SendMessageAsync(RevoltSharp.Channel,System.String,RevoltSharp.Embed[],System.String[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.SendMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Embed[],System.String[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.SendMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Embed[],System.String[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])">
            <summary>
            Send a message to the channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.UserMessage"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MessageHelper.SendFileAsync(RevoltSharp.Channel,System.String,System.String,RevoltSharp.Embed[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.SendFileAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.Byte[],System.String,System.String,RevoltSharp.Embed[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.SendFileAsync(RevoltSharp.Channel,System.Byte[],System.String,System.String,RevoltSharp.Embed[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.SendFileAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.Byte[],System.String,System.String,RevoltSharp.Embed[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.SendFileAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,RevoltSharp.Embed[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.SendFileAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.Byte[],System.String,System.String,RevoltSharp.Embed[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.SendFileAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.Byte[],System.String,System.String,RevoltSharp.Embed[],RevoltSharp.MessageMasquerade,RevoltSharp.MessageInteractions,RevoltSharp.MessageReply[])">
            <summary>
            Upload a file and send a message to the channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.UserMessage"/> 
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MessageHelper.GetMessagesAsync(RevoltSharp.Channel,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Get a list of messages from the channel up to 100.
            </summary>
            <returns>
            List of <see cref="T:RevoltSharp.Message"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MessageHelper.GetMessageAsync(RevoltSharp.Channel,System.String)">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.GetMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.GetMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)">
            <summary>
            Get a message from the current channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.Message"/> or <see langword="null" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MessageHelper.EditMessageAsync(RevoltSharp.UserMessage,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Embed[]})">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.EditMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Embed[]})" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.EditMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Embed[]})">
            <summary>
            Edit a message sent by the current user/bot account with properties.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.UserMessage"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MessageHelper.DeleteAsync(RevoltSharp.Message)">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Channel,RevoltSharp.Message)">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Channel,System.String)">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Channel,RevoltSharp.Message)">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Channel,System.String)">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.DeleteMessageAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)">
            <summary>
            Delete a message from a channel.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MessageHelper.DeleteMessagesAsync(RevoltSharp.Channel,RevoltSharp.Message[])">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.DeleteMessagesAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String[])" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.DeleteMessagesAsync(RevoltSharp.Channel,System.String[])">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.DeleteMessagesAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String[])" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.DeleteMessagesAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String[])">
            <summary>
            Delete a list of messages from a channel.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MessageHelper.CloseAsync(RevoltSharp.DMChannel)">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.CloseDMChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.CloseAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.DMChannel)">
            <inheritdoc cref="M:RevoltSharp.MessageHelper.CloseDMChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.MessageHelper.CloseDMChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Close a DM channel.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.ReactionHelpers">
            <summary>
            Revolt http/rest methods for reactions.
            </summary>
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.AddReactionAsync(RevoltSharp.UserMessage,RevoltSharp.Emoji)">
            <inheritdoc cref="M:RevoltSharp.ReactionHelpers.AddMessageReactionAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.AddReactionAsync(RevoltSharp.UserMessage,System.String)">
            <inheritdoc cref="M:RevoltSharp.ReactionHelpers.AddMessageReactionAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.AddMessageReactionAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)">
            <summary>
            Add a reaction to the message.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.RemoveReactionAsync(RevoltSharp.UserMessage,RevoltSharp.Emoji,System.String,System.Boolean)">
            <inheritdoc cref="M:RevoltSharp.ReactionHelpers.RemoveMessageReactionAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.RemoveReactionAsync(RevoltSharp.UserMessage,RevoltSharp.Emoji,RevoltSharp.User,System.Boolean)">
            <inheritdoc cref="M:RevoltSharp.ReactionHelpers.RemoveMessageReactionAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.RemoveReactionAsync(RevoltSharp.UserMessage,System.String,RevoltSharp.User,System.Boolean)">
            <inheritdoc cref="M:RevoltSharp.ReactionHelpers.RemoveMessageReactionAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.RemoveReactionAsync(RevoltSharp.UserMessage,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:RevoltSharp.ReactionHelpers.RemoveMessageReactionAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.RemoveMessageReactionAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Remove a reaction from the message.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.RemoveAllReactionsAsync(RevoltSharp.UserMessage)">
            <inheritdoc cref="M:RevoltSharp.ReactionHelpers.RemoveAllMessageReactionsAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.ReactionHelpers.RemoveAllMessageReactionsAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)">
            <summary>
            Remove all reactions from a message.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.EmojiHelper">
            <summary>
            Revolt http/rest methods for emojis.
            </summary>
        </member>
        <member name="M:RevoltSharp.EmojiHelper.GetEmojiAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get an emoji.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.Emoji" /> or <see langword="null" /> if no emoji found.
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.EmojiHelper.GetEmojisAsync(RevoltSharp.Server)">
            <inheritdoc cref="M:RevoltSharp.EmojiHelper.GetEmojisAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.EmojiHelper.GetEmojisAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get all emojis from a server
            </summary>
            <returns>
            List of server <see cref="T:RevoltSharp.Emoji" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.EmojiHelper.CreateEmojiAsync(RevoltSharp.Server,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:RevoltSharp.EmojiHelper.CreateEmojiAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:RevoltSharp.EmojiHelper.CreateEmojiAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a server <see cref="T:RevoltSharp.Emoji" />
            </summary>
            <remarks>
            You need <see cref="F:RevoltSharp.ServerPermission.ManageCustomisation" />
            </remarks>
            <param name="rest"></param>
            <param name="attachmentId">Uploaded file attachment from rest UploadFileAsync</param>
            <param name="serverId">Server id</param>
            <param name="name">Name of emoji</param>
            <param name="nsfw">Is the emoji nsfw</param>
            <returns><see cref="T:RevoltSharp.Emoji" /></returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.EmojiHelper.DeleteAsync(RevoltSharp.Emoji)">
            <inheritdoc cref="M:RevoltSharp.EmojiHelper.DeleteEmojiAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.EmojiHelper.DeleteEmojiAsync(RevoltSharp.Server,RevoltSharp.Emoji)">
            <inheritdoc cref="M:RevoltSharp.EmojiHelper.DeleteEmojiAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.EmojiHelper.DeleteEmojiAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Delete an <see cref="T:RevoltSharp.Emoji" /> from a server
            </summary>
            <remarks>
            You need <see cref="F:RevoltSharp.ServerPermission.ManageCustomisation" />
            </remarks>
            <param name="rest"></param>
            <param name="emojiId">Emoji id</param>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.InviteHelper">
            <summary>
            Revolt http/rest methods for server invites.
            </summary>
        </member>
        <member name="M:RevoltSharp.InviteHelper.DeleteAsync(RevoltSharp.Invite)">
            <inheritdoc cref="M:RevoltSharp.InviteHelper.DeleteInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.InviteHelper.DeleteInviteAsync(RevoltSharp.Server,RevoltSharp.Invite)">
            <inheritdoc cref="M:RevoltSharp.InviteHelper.DeleteInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.InviteHelper.DeleteInviteAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.InviteHelper.DeleteInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.InviteHelper.DeleteInviteAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Invite)">
            <inheritdoc cref="M:RevoltSharp.InviteHelper.DeleteInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.InviteHelper.DeleteInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Delete an invite.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.InviteHelper.GetInvitesAsync(RevoltSharp.Server)">
            <inheritdoc cref="M:RevoltSharp.InviteHelper.GetInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.InviteHelper.GetInvitesAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get a list of invites for the server.
            </summary>
            <returns>
            List of <see cref="T:RevoltSharp.Invite"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.InviteHelper.GetInviteAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.InviteHelper.GetInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.InviteHelper.GetInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get info for an invite.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.CreatedInvite"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.InviteHelper.CreateInviteAsync(RevoltSharp.TextChannel)">
            <inheritdoc cref="M:RevoltSharp.InviteHelper.CreateInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.InviteHelper.CreateInviteAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Only user accounts can create invites
            </summary>
            <returns>
            <see cref="T:RevoltSharp.CreatedInvite"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.MemberHelper">
            <summary>
            Revolt http/rest methods for server members.
            </summary>
        </member>
        <member name="M:RevoltSharp.MemberHelper.AddRoleAsync(RevoltSharp.ServerMember,RevoltSharp.Role)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.AddRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.AddRoleAsync(RevoltSharp.ServerMember,System.String)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.AddRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.AddRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,RevoltSharp.Role)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.AddRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.AddRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String)">
            <summary>
            Add a role to a server member.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MemberHelper.AddRolesAsync(RevoltSharp.ServerMember,RevoltSharp.Role[])">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.AddRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.AddRolesAsync(RevoltSharp.ServerMember,System.String[])">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.AddRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.AddRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,RevoltSharp.Role[])">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.AddRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.AddRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String[])">
            <summary>
            Add roles to a server member.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MemberHelper.RemoveRoleAsync(RevoltSharp.ServerMember,RevoltSharp.Role)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.RemoveRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.RemoveRoleAsync(RevoltSharp.ServerMember,System.String)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.RemoveRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.RemoveRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,RevoltSharp.Role)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.RemoveRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.RemoveRoleAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String)">
            <summary>
            Remove a role from a server member.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MemberHelper.RemoveRolesAsync(RevoltSharp.ServerMember,RevoltSharp.Role[])">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.RemoveRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.RemoveRolesAsync(RevoltSharp.ServerMember,System.String[])">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.RemoveRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.RemoveRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,RevoltSharp.Role[])">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.RemoveRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.RemoveRolesAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.ServerMember,System.String[])">
            <summary>
            Remove roles from a server member.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MemberHelper.GetMemberAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.GetMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.GetMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)">
            <summary>
            Get member info from a server.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.ServerMember"/> or <see langword="null" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MemberHelper.GetMembersAsync(RevoltSharp.Server,System.Boolean)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.GetMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.GetMembersAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.Boolean)">
            <summary>
            Get all members from a server.
            </summary>
            <remarks>
            It is recommended to reuse this list or use the server member cache once this has completed.
            </remarks>
            <returns>
            List of <see cref="T:RevoltSharp.ServerMember"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MemberHelper.KickMemberAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.KickMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.KickMemberAsync(RevoltSharp.Server,RevoltSharp.ServerMember)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.KickMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.KickMemberAsync(RevoltSharp.Server,RevoltSharp.User)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.KickMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.KickAsync(RevoltSharp.ServerMember)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.KickMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.KickMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)">
            <summary>
            Kick a member from a server.
            </summary>
            <remarks>
            Current user/bot account needs <see cref="F:RevoltSharp.ServerPermission.KickMembers"/>
            </remarks>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MemberHelper.BanMemberAsync(RevoltSharp.Server,System.String,System.String)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.BanMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.BanMemberAsync(RevoltSharp.Server,RevoltSharp.ServerMember,System.String)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.BanMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.BanMemberAsync(RevoltSharp.Server,RevoltSharp.User,System.String)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.BanMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.BanAsync(RevoltSharp.ServerMember,System.String)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.BanMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.BanMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)">
            <summary>
            Ban a member from a server.
            </summary>
            <remarks>
            Current user/bot account needs <see cref="F:RevoltSharp.ServerPermission.BanMembers"/>
            </remarks>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MemberHelper.UnBanMemberAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.UnBanMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.UnBanMemberAsync(RevoltSharp.Server,RevoltSharp.User)">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.UnBanMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.UnBanMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)">
            <summary>
            Unban a member from a server.
            </summary>
            <remarks>
            Current user/bot account needs <see cref="F:RevoltSharp.ServerPermission.BanMembers"/>
            </remarks>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.MemberHelper.ModifyAsync(RevoltSharp.ServerMember,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Attachment},RevoltSharp.Option{System.Nullable{System.DateTime}})">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.ModifyMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Attachment},RevoltSharp.Option{System.Nullable{System.DateTime}})" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.ModifyMemberAsync(RevoltSharp.Server,RevoltSharp.ServerMember,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Attachment},RevoltSharp.Option{System.Nullable{System.DateTime}})">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.ModifyMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Attachment},RevoltSharp.Option{System.Nullable{System.DateTime}})" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.ModifyMemberAsync(RevoltSharp.Server,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Attachment},RevoltSharp.Option{System.Nullable{System.DateTime}})">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.ModifyMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Attachment},RevoltSharp.Option{System.Nullable{System.DateTime}})" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.ModifyMemberAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Server,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Attachment},RevoltSharp.Option{System.Nullable{System.DateTime}})">
            <inheritdoc cref="M:RevoltSharp.MemberHelper.ModifyMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Attachment},RevoltSharp.Option{System.Nullable{System.DateTime}})" />
        </member>
        <member name="M:RevoltSharp.MemberHelper.ModifyMemberAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{RevoltSharp.Attachment},RevoltSharp.Option{System.Nullable{System.DateTime}})">
            <summary>
            Modify a server member.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.RoleHelper">
            <summary>
            Revolt http/rest methods for server roles.
            </summary>
        </member>
        <member name="M:RevoltSharp.RoleHelper.CreateRoleAsync(RevoltSharp.Server,System.String,RevoltSharp.Option{System.Int32})">
            <inheritdoc cref="M:RevoltSharp.RoleHelper.CreateRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.Int32})" />
        </member>
        <member name="M:RevoltSharp.RoleHelper.CreateRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.Int32})">
            <summary>
            Create a server role.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.Role"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.RoleHelper.ModifyAsync(RevoltSharp.Role,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.Int32})">
            <inheritdoc cref="M:RevoltSharp.RoleHelper.ModifyRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.Int32})" />
        </member>
        <member name="M:RevoltSharp.RoleHelper.ModifyRoleAsync(RevoltSharp.Server,RevoltSharp.Role,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.Int32})">
            <inheritdoc cref="M:RevoltSharp.RoleHelper.ModifyRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.Int32})" />
        </member>
        <member name="M:RevoltSharp.RoleHelper.ModifyRoleAsync(RevoltSharp.Server,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.Int32})">
            <inheritdoc cref="M:RevoltSharp.RoleHelper.ModifyRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.Int32})" />
        </member>
        <member name="M:RevoltSharp.RoleHelper.ModifyRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean},RevoltSharp.Option{System.Int32})">
            <summary>
            Update a role with properties.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.Role"/> 
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.RoleHelper.DeleteAsync(RevoltSharp.Role)">
            <inheritdoc cref="M:RevoltSharp.RoleHelper.DeleteRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.RoleHelper.DeleteRoleAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.RoleHelper.DeleteRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.RoleHelper.DeleteRoleAsync(RevoltSharp.Server,RevoltSharp.Role)">
            <inheritdoc cref="M:RevoltSharp.RoleHelper.DeleteRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.RoleHelper.DeleteRoleAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String)">
            <summary>
            Delete a role from a server.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.ServerHelper">
            <summary>
            Revolt http/rest methods for servers.
            </summary>
        </member>
        <member name="M:RevoltSharp.ServerHelper.GetServerAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get a server.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.Server"/> or <see langword="null" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.ServerHelper.GetBansAsync(RevoltSharp.Server)">
            <inheritdoc cref="M:RevoltSharp.ServerHelper.GetBansAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.ServerHelper.GetBansAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get a list of banned users for a server.
            </summary>
            <returns>
            List of <see cref="T:RevoltSharp.ServerBan"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.ServerHelper.LeaveAsync(RevoltSharp.Server)">
            <inheritdoc cref="M:RevoltSharp.ServerHelper.LeaveServerAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.ServerHelper.LeaveServerAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Leave server or delete it if owned.
            </summary>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.TextChannelHelper">
            <summary>
            Revolt http/rest methods for text channels.
            </summary>
        </member>
        <member name="M:RevoltSharp.TextChannelHelper.GetTextChannelAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.TextChannelHelper.GetTextChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.TextChannelHelper.GetTextChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get a server text channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.TextChannel"/> or <see langword="null" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.TextChannelHelper.CreateTextChannelAsync(RevoltSharp.Server,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:RevoltSharp.TextChannelHelper.CreateTextChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:RevoltSharp.TextChannelHelper.CreateTextChannelAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Server,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:RevoltSharp.TextChannelHelper.CreateTextChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:RevoltSharp.TextChannelHelper.CreateTextChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a server text channel with properties.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.TextChannel" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.TextChannelHelper.ModifyAsync(RevoltSharp.TextChannel,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean})">
            <summary>
            Update a text channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.TextChannel"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.VoiceChannelHelper">
            <summary>
            Revolt http/rest methods for voice channel.
            </summary>
        </member>
        <member name="M:RevoltSharp.VoiceChannelHelper.GetVoiceChannelAsync(RevoltSharp.Server,System.String)">
            <inheritdoc cref="M:RevoltSharp.VoiceChannelHelper.GetVoiceChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)" />
        </member>
        <member name="M:RevoltSharp.VoiceChannelHelper.GetVoiceChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String)">
            <summary>
            Get a server voice channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.VoiceChannel"/> or <see langword="null" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.VoiceChannelHelper.CreateVoiceChannelAsync(RevoltSharp.Server,System.String,System.String)">
            <inheritdoc cref="M:RevoltSharp.VoiceChannelHelper.CreateVoiceChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.VoiceChannelHelper.CreateVoiceChannelAsync(RevoltSharp.Rest.RevoltRestClient,RevoltSharp.Server,System.String,System.String)">
            <inheritdoc cref="M:RevoltSharp.VoiceChannelHelper.CreateVoiceChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:RevoltSharp.VoiceChannelHelper.CreateVoiceChannelAsync(RevoltSharp.Rest.RevoltRestClient,System.String,System.String,System.String)">
            <summary>
            Create a server voice channel with properties.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.VoiceChannel" />
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="M:RevoltSharp.VoiceChannelHelper.ModifyAsync(RevoltSharp.VoiceChannel,RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.String},RevoltSharp.Option{System.Boolean})">
            <summary>
            Update a voice channel.
            </summary>
            <returns>
            <see cref="T:RevoltSharp.VoiceChannel"/>
            </returns>
            <exception cref="T:RevoltSharp.RevoltArgumentException"></exception>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.Rest.IRevoltRequest">
            <summary>
            Send a custom json body request to the Revolt instance API<br /><br />
            Use <see cref="M:RevoltSharp.Rest.RevoltRestClient.SendRequestAsync(RevoltSharp.Rest.RequestType,System.String,RevoltSharp.Rest.IRevoltRequest)"/> or <see cref="M:RevoltSharp.Rest.RevoltRestClient.SendRequestAsync``1(RevoltSharp.Rest.RequestType,System.String,RevoltSharp.Rest.IRevoltRequest,System.Boolean)"/>
            </summary>
        </member>
        <member name="T:RevoltSharp.Rest.RevoltRestClient">
            <summary>
            The internal http client used for sending requests to the Revolt instance API and built-in extension methods.
            </summary>
        </member>
        <member name="M:RevoltSharp.Rest.RevoltRestClient.SendRequestAsync(RevoltSharp.Rest.RequestType,System.String,RevoltSharp.Rest.IRevoltRequest)">
            <summary>
            Send a custom request to the Revolt instance API.
            </summary>
            <remarks>
            Optionally you can also send a C# class as the json body for the request, this is useful for POST/PUT requests.
            <para />
            You need to interface your custom class using <see cref="T:RevoltSharp.Rest.IRevoltRequest"/><br/>
            CustomClass : RevoltRequest<br/>
            {<br/>
                public string option = "Hi"<br/>
            }
            </remarks>
            <returns><see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
        </member>
        <member name="M:RevoltSharp.Rest.RevoltRestClient.SendRequestAsync``1(RevoltSharp.Rest.RequestType,System.String,RevoltSharp.Rest.IRevoltRequest,System.Boolean)">
            <summary>
            Send a custom request to the Revolt instance API.
            </summary>
            <remarks>
            Optionally you can also send a C# class as the json body for the request, this is useful for POST/PUT requests.
            <para />
            You need to interface your custom class using <see cref="T:RevoltSharp.Rest.IRevoltRequest"/><br/>
            CustomClass : RevoltRequest<br/>
            {<br/>
                public string option = "Hi"<br/>
            }
            </remarks>
            <returns>Input your own <see langword="class" /> object to parse the response data from json.</returns>
        </member>
        <member name="M:RevoltSharp.Rest.RevoltRestClient.UploadFileAsync(System.String,RevoltSharp.Rest.UploadFileType)">
            <inheritdoc cref="M:RevoltSharp.Rest.RevoltRestClient.UploadFileAsync(System.Byte[],System.String,RevoltSharp.Rest.UploadFileType)" />
        </member>
        <member name="M:RevoltSharp.Rest.RevoltRestClient.UploadFileAsync(System.Byte[],System.String,RevoltSharp.Rest.UploadFileType)">
            <summary>
            Upload a file to the Revolt instance CDN that can be used for attachments, avatars, banners, ect.
            </summary>
            <returns>Created <see cref="T:RevoltSharp.FileAttachment"/></returns>
            <exception cref="T:RevoltSharp.RevoltRestException"></exception>
        </member>
        <member name="T:RevoltSharp.Rest.UploadFileType">
            <summary>
            File type to upload to the Revolt instance CDN.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.UploadFileType.Attachment">
            <summary>
            Upload a normal file e.g txt, mp4, ect.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.UploadFileType.Avatar">
            <summary>
            Set the bot's avatar with this image.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.UploadFileType.Icon">
            <summary>
            Set a server or channel icon with this image.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.UploadFileType.Banner">
            <summary>
            Set a server banner with this image.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.UploadFileType.Background">
            <summary>
            Set the bot's profile background with this image.
            </summary>
        </member>
        <member name="T:RevoltSharp.Rest.RequestType">
            <summary>
            The request method type to use for sending requests to the Revolt instance API.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.RequestType.Get">
            <summary>
            Get data from the API.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.RequestType.Post">
            <summary>
            Post new messages or create channels.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.RequestType.Delete">
            <summary>
            Delete a message, channel, ect.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.RequestType.Patch">
            <summary>
            Update an existing channel, server, ect.
            </summary>
        </member>
        <member name="F:RevoltSharp.Rest.RequestType.Put">
            <summary>
            Post new emojis.
            </summary>
        </member>
        <member name="T:Optionals.Optional">
            <summary>
            Provides a set of functions for creating optional values.
            </summary>
        </member>
        <member name="M:Optionals.Optional.Some``1(``0)">
            <summary>
            Wraps an existing value in an Option&lt;T&gt; instance.
            </summary>
            <param name="value">The value to be wrapped.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optionals.Optional.None``1">
            <summary>
            Creates an empty Option&lt;T&gt; instance.
            </summary>
            <returns>An empty optional.</returns>
        </member>
        <member name="T:Optionals.OptionExtensions">
            <summary>
            Optional wrapper for specifying properties that can be missing or included.
            </summary>
        </member>
        <member name="M:Optionals.OptionExtensions.Some``1(``0)">
            <summary>
            Wraps an existing value in an Option&lt;T&gt; instance.
            </summary>
            <param name="value">The value to be wrapped.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optionals.OptionExtensions.None``1(``0)">
            <summary>
            Creates an empty Option&lt;T&gt; instance from a specified value.
            </summary>
            <param name="value">A value determining the type of the optional.</param>
            <returns>An empty optional.</returns>
        </member>
        <member name="T:Optionals.Optional`1">
            <summary>
            Represents an optional value.
            </summary>
        </member>
        <member name="P:Optionals.Optional`1.HasValue">
            <summary>
            Checks if a value is present.
            </summary>
        </member>
        <member name="M:Optionals.Optional`1.ValueOr(`0)">
            <summary>
            Returns the existing value if present, and otherwise an alternative value.
            </summary>
            <param name="alternative">The alternative value.</param>
            <returns>The existing or alternative value.</returns>
        </member>
    </members>
</doc>
